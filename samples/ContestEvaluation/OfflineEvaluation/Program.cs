using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using CmdParser;

namespace OfflineEvaluation
{
    class Program
    {
        class ArgsEval
        {
            #pragma warning disable 0649    // suppress the warning for "Field ... is never assigned to"
            [Argument(ArgumentType.MultipleUnique, HelpText = "Input log file generated by EvaluationServer.")]
            public string[] log;
            #pragma warning restore 0649
        }

        static void Eval(ArgsEval cmd)
        {
            int valid_num = 0;
            int processed_num = 0;
            var accuracies = cmd.log.SelectMany(logfile => File.ReadLines(logfile))
                .Where(line => !string.IsNullOrEmpty(line))
                .Select(line => line.Split('\t'))
                .Where(cols => cols.Count() >= 3)
                .GroupBy(cols => cols[0])
                .Select(g =>
                {
                    var valid_lines = g.AsEnumerable()
                        .Where(cols => cols[2].IndexOf("return 0B.") < 0);
                    if (valid_lines.Count() > 0)
                        return valid_lines.First();

                    return g.AsEnumerable().First();
                })
                .Where(cols =>
                {
                    processed_num++;
                    return !string.IsNullOrEmpty(cols[1]);
                })
                .Select(cols =>
                {
                    string label = cols[1].ToLower();
                    var result = cols[2].Split(';')
                        .Select(r => r.Split(':')[0].Trim().ToLower())
                        .Take(5)
                        .ToArray();

                    if (cols[2].IndexOf("return 0B.") < 0)
                        valid_num++;

                    if (result.Length == 0)
                        return Tuple.Create(false, false);
                    else
                        return Tuple.Create(string.Compare(label, result[0]) == 0, Array.IndexOf(result, label) >= 0);
                })
                .ToArray();
            var top1_acc = (float)accuracies.Sum(tp => tp.Item1 ? 1 : 0) / accuracies.Count();
            var top5_acc = (float)accuracies.Sum(tp => tp.Item2 ? 1 : 0) / accuracies.Count();

            Console.WriteLine("Processed: {0}, evaluated: {1}, valid: {2}, top1_acc: {3}, top5_acc: {4}", processed_num, accuracies.Count(), valid_num, top1_acc, top5_acc);
        }

        static void Main(string[] args)
        {
            ParserX.AddTask<ArgsEval>(Eval, "Evaluate result log file");

            if (ParserX.ParseArgumentsWithUsage(args))
            {
                Stopwatch timer = Stopwatch.StartNew();
                ParserX.RunTask();
                timer.Stop();
                Console.WriteLine("Time used: {0}", timer.Elapsed);
            }
        }
    }
}
